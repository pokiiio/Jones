let targetDevice = null;

const NORA_DEVICE_NAME = "LSLED";
const NORA_CHARACTERISTIC_SERVICE_UUID = "0000fee0-0000-1000-8000-00805f9b34fb";
const NORA_CHARACTERISTIC_DATA_UUID = "0000fee1-0000-1000-8000-00805f9b34fb";

function writeValue(writeFunction) {
    navigator.bluetooth.requestDevice({
        filters: [
            { services: [NORA_CHARACTERISTIC_SERVICE_UUID] },
            { namePrefix: NORA_DEVICE_NAME }
        ]
    })
        .then(device => {
            targetDevice = device;
            return device.gatt.connect();
        })
        .then(server => {
            return server.getPrimaryService(NORA_CHARACTERISTIC_SERVICE_UUID);
        })
        .then(service => {
            return service.getCharacteristic(NORA_CHARACTERISTIC_DATA_UUID);
        })
        .then(characteristic => {
            return writeFunction(characteristic);
        })
        .then(() => {
            return targetDevice.gatt.disconnect();
        })
        .then(() => {
            showModal("write done");
        })
        .catch(error => {
            showModal(error);
            targetDevice = null;
        });
}

function writeTeamNoraHack(characteristic) {
    // TEAM NORA HACK
    let data1 = new Uint8Array([0x77, 0x61, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data2 = new Uint8Array([0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data3 = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x0C, 0x06, 0x17, 0x2D, 0x23, 0x00, 0x00, 0x00, 0x00]);
    let data4 = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data5 = new Uint8Array([0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0]);
    let data6 = new Uint8Array([0xfe, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6]);
    let data7 = new Uint8Array([0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data8 = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xe6, 0xf6, 0xde, 0xce, 0xce]);
    let data9 = new Uint8Array([0xc6, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0xfe]);
    let data10 = new Uint8Array([0xc6, 0xc6, 0xfe, 0xd8, 0xcc, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6]);
    let data11 = new Uint8Array([0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data12 = new Uint8Array([0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xfe, 0xc6]);
    let data13 = new Uint8Array([0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc0, 0xc0, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00]);
    let data14 = new Uint8Array([0x00, 0xc6, 0xcc, 0xd8, 0xf0, 0xd8, 0xcc, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

    return characteristic.writeValue(data1)
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data2); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data3); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data4); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data5); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data6); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data7); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data8); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data9); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data10); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data11); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data12); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data13); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data14); })
}

function writeHackOrDie(characteristic) {
    // HACK OR DIE
    let data1 = new Uint8Array([0x77, 0x61, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data2 = new Uint8Array([0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data3 = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x0C, 0x06, 0x17, 0x2D, 0x23, 0x00, 0x00, 0x00, 0x00]);
    let data4 = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data5 = new Uint8Array([0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc6]);
    let data6 = new Uint8Array([0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc0, 0xc0, 0xc6, 0xc6, 0xc6, 0xfe]);
    let data7 = new Uint8Array([0x00, 0x00, 0x00, 0xc6, 0xcc, 0xd8, 0xf0, 0xd8, 0xcc, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00]);
    let data8 = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x6c, 0x6c]);
    let data9 = new Uint8Array([0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x78, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00]);
    let data10 = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xce, 0xc6, 0xc6, 0xc6, 0xc6]);
    let data11 = new Uint8Array([0xce, 0xf8, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00]);
    let data12 = new Uint8Array([0xfe, 0xc0, 0xc0, 0xfe, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

    return characteristic.writeValue(data1)
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data2); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data3); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data4); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data5); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data6); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data7); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data8); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data9); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data10); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data11); })
        .then(() => { return sleep(); })
        .then(() => { return characteristic.writeValue(data12); })
}

function sleep() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve();
        }, 100);
    });
}

function showModal(message) {
    document.getElementsByName("modal-message")[0].innerHTML = message;
    $("#myModal").modal("show");
}